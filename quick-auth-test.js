console.log('üîê JWT Ïù∏Ï¶ù ÌÜ†ÌÅ∞ ÌÖåÏä§Ìä∏');
console.log('=======================');

const testDirectAuth = async () => {
  console.log('\nüìù ÏÉà ÏÇ¨Ïö©Ïûê ÏÉùÏÑ± Î∞è Ï¶âÏãú Ïù∏Ï¶ù ÌÖåÏä§Ìä∏...');

  const testEmail = `quick-test-${Date.now()}@example.com`;
  const testPassword = 'testpass123';

  try {
    // 1. ÌöåÏõêÍ∞ÄÏûÖ
    console.log(`\n1Ô∏è‚É£ ÌöåÏõêÍ∞ÄÏûÖ: ${testEmail}`);
    const signupResponse = await fetch('http://localhost:3000/api/auth/signup', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: testEmail,
        password: testPassword,
        name: 'Quick Test User'
      })
    });

    const signupData = await signupResponse.json();
    console.log(`   Status: ${signupResponse.status}`);
    console.log(`   Response:`, JSON.stringify(signupData, null, 2));

    if (!signupData.success) {
      throw new Error('ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå®');
    }

    // 2. Î°úÍ∑∏Ïù∏
    console.log(`\n2Ô∏è‚É£ Î°úÍ∑∏Ïù∏: ${testEmail}`);
    const loginResponse = await fetch('http://localhost:3000/api/auth/email-login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: testEmail,
        password: testPassword
      })
    });

    const loginData = await loginResponse.json();
    console.log(`   Status: ${loginResponse.status}`);
    console.log(`   Response:`, JSON.stringify(loginData, null, 2));

    if (!loginData.success || !loginData.token) {
      throw new Error('Î°úÍ∑∏Ïù∏ Ïã§Ìå® ÎòêÎäî ÌÜ†ÌÅ∞ ÏóÜÏùå');
    }

    const authHeader = `auth-token ${loginData.token}`;
    console.log(`\nüîë Ïù∏Ï¶ù Ìó§Îçî: ${authHeader.substring(0, 50)}...`);

    // 3. auth/status ÌÖåÏä§Ìä∏
    console.log(`\n3Ô∏è‚É£ Auth Status ÌÖåÏä§Ìä∏`);
    const statusResponse = await fetch('http://localhost:3000/api/auth/status', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': authHeader
      }
    });

    const statusData = await statusResponse.json();
    console.log(`   Status: ${statusResponse.status}`);
    console.log(`   Response:`, JSON.stringify(statusData, null, 2));

    // 4. Profile API ÌÖåÏä§Ìä∏
    console.log(`\n4Ô∏è‚É£ Profile API ÌÖåÏä§Ìä∏`);
    const profileResponse = await fetch('http://localhost:3000/api/profile', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': authHeader
      }
    });

    const profileData = await profileResponse.json();
    console.log(`   Status: ${profileResponse.status}`);
    console.log(`   Response:`, JSON.stringify(profileData, null, 2));

    // 5. Friends API ÌÖåÏä§Ìä∏
    console.log(`\n5Ô∏è‚É£ Friends API ÌÖåÏä§Ìä∏`);
    const friendsResponse = await fetch('http://localhost:3000/api/friends', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': authHeader
      }
    });

    const friendsData = await friendsResponse.json();
    console.log(`   Status: ${friendsResponse.status}`);
    console.log(`   Response:`, JSON.stringify(friendsData, null, 2));

    console.log('\n‚úÖ Î™®Îì† ÌÖåÏä§Ìä∏ ÏôÑÎ£å!');

    return {
      signup: signupResponse.status === 200,
      login: loginResponse.status === 200,
      status: statusResponse.status === 200 && statusData.authenticated,
      profile: profileResponse.status === 200,
      friends: friendsResponse.status === 200
    };

  } catch (error) {
    console.error('‚ùå ÌÖåÏä§Ìä∏ Ï§ë Ïò§Î•ò Î∞úÏÉù:', error.message);
    return { error: error.message };
  }
};

testDirectAuth()
  .then(results => {
    console.log('\nüìä ÌÖåÏä§Ìä∏ Í≤∞Í≥º:');
    console.log('================');
    Object.entries(results).forEach(([test, result]) => {
      const icon = result ? '‚úÖ' : '‚ùå';
      console.log(`${icon} ${test}: ${result ? 'PASS' : 'FAIL'}`);
    });
  })
  .catch(console.error);