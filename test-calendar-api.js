console.log('üìÖ Calendar API ÌÖåÏä§Ìä∏');
console.log('======================');

const testCalendarAPI = async () => {
  console.log('\nüìù ÏÉà ÏÇ¨Ïö©Ïûê ÏÉùÏÑ± Î∞è Ï∫òÎ¶∞Îçî ÌÖåÏä§Ìä∏...');

  const testEmail = `calendar-test-${Date.now()}@example.com`;
  const testPassword = 'testpass123';

  try {
    // 1. ÌöåÏõêÍ∞ÄÏûÖ
    console.log(`\n1Ô∏è‚É£ ÌöåÏõêÍ∞ÄÏûÖ: ${testEmail}`);
    const signupResponse = await fetch('http://localhost:3000/api/auth/signup', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: testEmail,
        password: testPassword,
        name: 'Calendar Test User'
      })
    });

    const signupData = await signupResponse.json();
    if (!signupData.success) {
      throw new Error('ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå®');
    }

    // 2. Î°úÍ∑∏Ïù∏
    console.log(`\n2Ô∏è‚É£ Î°úÍ∑∏Ïù∏: ${testEmail}`);
    const loginResponse = await fetch('http://localhost:3000/api/auth/email-login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: testEmail,
        password: testPassword
      })
    });

    const loginData = await loginResponse.json();
    if (!loginData.success || !loginData.token) {
      throw new Error('Î°úÍ∑∏Ïù∏ Ïã§Ìå® ÎòêÎäî ÌÜ†ÌÅ∞ ÏóÜÏùå');
    }

    const authHeader = `auth-token ${loginData.token}`;
    const userId = loginData.user.id;
    console.log(`   User ID: ${userId}`);
    console.log(`   Token: ${loginData.token.substring(0, 30)}...`);

    // 3. Ïù¥Î≤§Ìä∏ ÏÉùÏÑ± ÌÖåÏä§Ìä∏
    console.log(`\n3Ô∏è‚É£ Ï∫òÎ¶∞Îçî Ïù¥Î≤§Ìä∏ ÏÉùÏÑ±`);
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(14, 0, 0, 0);

    const endTime = new Date(tomorrow);
    endTime.setHours(15, 0, 0, 0);

    const createEventResponse = await fetch('http://localhost:3000/api/calendar/events', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': authHeader
      },
      body: JSON.stringify({
        summary: 'ÌÖåÏä§Ìä∏ ÎØ∏ÌåÖ',
        description: 'Ïù¥Î©îÏùº Ïù∏Ï¶ù ÏÇ¨Ïö©Ïûê ÌÖåÏä§Ìä∏',
        location: 'Ïò®ÎùºÏù∏',
        startDateTime: tomorrow.toISOString(),
        endDateTime: endTime.toISOString(),
        attendees: ['test@example.com'],
        reminders: { useDefault: true }
      })
    });

    const createEventData = await createEventResponse.json();
    console.log(`   Status: ${createEventResponse.status}`);
    console.log(`   Response:`, JSON.stringify(createEventData, null, 2));

    // 4. Ïù¥Î≤§Ìä∏ Î™©Î°ù Ï°∞Ìöå
    console.log(`\n4Ô∏è‚É£ Ï∫òÎ¶∞Îçî Ïù¥Î≤§Ìä∏ Î™©Î°ù Ï°∞Ìöå`);
    const listEventsResponse = await fetch('http://localhost:3000/api/calendar/events', {
      method: 'GET',
      headers: {
        'Authorization': authHeader
      }
    });

    const listEventsData = await listEventsResponse.json();
    console.log(`   Status: ${listEventsResponse.status}`);
    console.log(`   Total Events: ${listEventsData.events?.length || 0}`);
    if (listEventsData.events && listEventsData.events.length > 0) {
      console.log(`   First Event:`, JSON.stringify(listEventsData.events[0], null, 2));
    }

    // 5. AI Chat APIÎ°ú Ï∫òÎ¶∞Îçî Ïó∞Îèô ÌÖåÏä§Ìä∏
    console.log(`\n5Ô∏è‚É£ AI Chat APIÎ°ú Ï∫òÎ¶∞Îçî Ïó∞Îèô ÌÖåÏä§Ìä∏`);
    const aiChatResponse = await fetch('http://localhost:3000/api/ai/chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': authHeader
      },
      body: JSON.stringify({
        message: 'Ïò§Îäò ÏùºÏ†ï ÏïåÎ†§Ï§ò',
        sessionId: `test-session-${Date.now()}`,
        locale: 'ko',
        timezone: 'Asia/Seoul'
      })
    });

    const aiChatData = await aiChatResponse.json();
    console.log(`   Status: ${aiChatResponse.status}`);
    console.log(`   AI Response:`, aiChatData.message ? aiChatData.message.substring(0, 100) + '...' : 'No message');

    console.log('\n‚úÖ Î™®Îì† Ï∫òÎ¶∞Îçî ÌÖåÏä§Ìä∏ ÏôÑÎ£å!');

    return {
      signup: signupResponse.status === 200,
      login: loginResponse.status === 200,
      createEvent: createEventResponse.status === 200,
      listEvents: listEventsResponse.status === 200,
      aiChat: aiChatResponse.status === 200
    };

  } catch (error) {
    console.error('‚ùå ÌÖåÏä§Ìä∏ Ï§ë Ïò§Î•ò Î∞úÏÉù:', error.message);
    return { error: error.message };
  }
};

testCalendarAPI()
  .then(results => {
    console.log('\nüìä ÌÖåÏä§Ìä∏ Í≤∞Í≥º:');
    console.log('================');
    Object.entries(results).forEach(([test, result]) => {
      const icon = result ? '‚úÖ' : '‚ùå';
      console.log(`${icon} ${test}: ${result ? 'PASS' : 'FAIL'}`);
    });
  })
  .catch(console.error);